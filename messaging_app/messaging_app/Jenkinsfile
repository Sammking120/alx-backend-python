pipeline {
    agent {
        docker {
            image 'python:3.9'
            args '-u root'
        }
    }
    
    environment {
        GITHUB_CREDENTIALS = credentials('github-credentials-id')
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials-id')
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-credentials-id',
                    url: 'https://github.com/your-username/your-messaging-app.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'pip install pytest pytest-html'
            }
        }
        
        stage('Run Tests') {
            steps {
                sh 'pytest --junitxml=test-report.xml --html=report.html --self-contained-html'
            }
        }
        
        stage('Archive Reports') {
            steps {
                archiveArtifacts artifacts: 'test-report.xml,report.html', allowEmptyArchive: true
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials-id') {
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_NUMBER}").push()
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_NUMBER}").push('latest')
                    }
                }
            }
        }
    }
    
    post {
        always {
            junit 'test-report.xml'
            publishHTML(target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'report.html',
                reportName: 'Test Report'
            ])
        }
    }
}